#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 5

//Static Stack Implementation
typedef struct {
    int data[MAX_SIZE];  // Fixed-size array
    int top;             // Index of top element
} StaticStack;
void initStaticStack(StaticStack *s) {
    s->top = -1;
}
int isStaticFull(StaticStack *s) {
    return s->top == MAX_SIZE - 1;
}
int isStaticEmpty(StaticStack *s) {
    return s->top == -1;
}
void staticPush(StaticStack *s, int value) {
    if (isStaticFull(s)) {
        printf("Static Stack Overflow\n");
        return;
    }
    s->data[++s->top] = value;
}
int staticPop(StaticStack *s) {
    if (isStaticEmpty(s)) {
        printf("Static Stack Underflow\n");
        return -1;
    }
    return s->data[s->top--];
}
void displayStatic(StaticStack *s) {
    if (isStaticEmpty(s)) {
        printf("Static Stack is empty\n");
        return;
    }
    printf("Static Stack: ");
    for(int i = s->top; i >= 0; i--) {
        printf("%d ", s->data[i]);
    }
    printf("\n");
}
//Dynamic Stack Implementation
typedef struct Node {
    int data;
    struct Node *next;
} Node;
typedef struct {
    Node *top; 
} DynamicStack;
void initDynamicStack(DynamicStack *ds) {
    ds->top = NULL;
}
int isDynamicEmpty(DynamicStack *ds) {
    return ds->top == NULL;
}
void dynamicPush(DynamicStack *ds, int value) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    if(!newNode) {
        printf("Memory allocation failed!\n");
        return;
    }
    newNode->data = value;
    newNode->next = ds->top;
    ds->top = newNode;
}
int dynamicPop(DynamicStack *ds) {
    if(isDynamicEmpty(ds)) {
        printf("Dynamic Stack Underflow!\n");
        return -1;
    }
    Node *temp = ds->top;
    int popped = temp->data;
    ds->top = ds->top->next;
    free(temp);
    return popped;
}
void displayDynamic(DynamicStack *ds) {
    if(isDynamicEmpty(ds)) {
        printf("Dynamic Stack is empty!\n");
        return;
    }
    Node *current = ds->top;
    printf("Dynamic Stack: ");
    while(current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}
